//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34003
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Buiseness_Logic.LaunchServices {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="LaunchServices.IService")]
    public interface IService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/AgregarCustomer", ReplyAction="http://tempuri.org/IService/AgregarCustomerResponse")]
        bool AgregarCustomer(string Nombre, string Apellido, string Correo, string Contrasegna);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/AgregarCustomer", ReplyAction="http://tempuri.org/IService/AgregarCustomerResponse")]
        System.Threading.Tasks.Task<bool> AgregarCustomerAsync(string Nombre, string Apellido, string Correo, string Contrasegna);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/Login", ReplyAction="http://tempuri.org/IService/LoginResponse")]
        bool[] Login(string Correo, string Contrasegna);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/Login", ReplyAction="http://tempuri.org/IService/LoginResponse")]
        System.Threading.Tasks.Task<bool[]> LoginAsync(string Correo, string Contrasegna);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/ClienteActivo", ReplyAction="http://tempuri.org/IService/ClienteActivoResponse")]
        string[] ClienteActivo(string Correo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/ClienteActivo", ReplyAction="http://tempuri.org/IService/ClienteActivoResponse")]
        System.Threading.Tasks.Task<string[]> ClienteActivoAsync(string Correo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/ActualizarCustomer", ReplyAction="http://tempuri.org/IService/ActualizarCustomerResponse")]
        bool ActualizarCustomer(string Nombre, string Apellido, string Correo, string Contrasegna);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/ActualizarCustomer", ReplyAction="http://tempuri.org/IService/ActualizarCustomerResponse")]
        System.Threading.Tasks.Task<bool> ActualizarCustomerAsync(string Nombre, string Apellido, string Correo, string Contrasegna);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/AgregarMembership", ReplyAction="http://tempuri.org/IService/AgregarMembershipResponse")]
        bool AgregarMembership(string Correo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/AgregarMembership", ReplyAction="http://tempuri.org/IService/AgregarMembershipResponse")]
        System.Threading.Tasks.Task<bool> AgregarMembershipAsync(string Correo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/AgregarAppPurchased", ReplyAction="http://tempuri.org/IService/AgregarAppPurchasedResponse")]
        bool AgregarAppPurchased(string NombreApp, string Correo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/AgregarAppPurchased", ReplyAction="http://tempuri.org/IService/AgregarAppPurchasedResponse")]
        System.Threading.Tasks.Task<bool> AgregarAppPurchasedAsync(string NombreApp, string Correo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/AgregarDeveloper", ReplyAction="http://tempuri.org/IService/AgregarDeveloperResponse")]
        bool AgregarDeveloper(string Nombre, string Apellido, string Correo, string Contrasegna);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/AgregarDeveloper", ReplyAction="http://tempuri.org/IService/AgregarDeveloperResponse")]
        System.Threading.Tasks.Task<bool> AgregarDeveloperAsync(string Nombre, string Apellido, string Correo, string Contrasegna);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/ActualizarDeveloper", ReplyAction="http://tempuri.org/IService/ActualizarDeveloperResponse")]
        bool ActualizarDeveloper(string Nombre, string Apellido, string Correo, string Contrasegna);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/ActualizarDeveloper", ReplyAction="http://tempuri.org/IService/ActualizarDeveloperResponse")]
        System.Threading.Tasks.Task<bool> ActualizarDeveloperAsync(string Nombre, string Apellido, string Correo, string Contrasegna);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/DesarrolladorActivo", ReplyAction="http://tempuri.org/IService/DesarrolladorActivoResponse")]
        string[] DesarrolladorActivo(string Correo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/DesarrolladorActivo", ReplyAction="http://tempuri.org/IService/DesarrolladorActivoResponse")]
        System.Threading.Tasks.Task<string[]> DesarrolladorActivoAsync(string Correo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/AgregarApp", ReplyAction="http://tempuri.org/IService/AgregarAppResponse")]
        bool AgregarApp(string CorreoDesarrollador, string Nombre, string Descripcion, string Categoria, byte[] Imagen);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/AgregarApp", ReplyAction="http://tempuri.org/IService/AgregarAppResponse")]
        System.Threading.Tasks.Task<bool> AgregarAppAsync(string CorreoDesarrollador, string Nombre, string Descripcion, string Categoria, byte[] Imagen);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/ObtenerAppsDeveloper", ReplyAction="http://tempuri.org/IService/ObtenerAppsDeveloperResponse")]
        string[][] ObtenerAppsDeveloper(string Correo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/ObtenerAppsDeveloper", ReplyAction="http://tempuri.org/IService/ObtenerAppsDeveloperResponse")]
        System.Threading.Tasks.Task<string[][]> ObtenerAppsDeveloperAsync(string Correo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/ObtenerImagenApp", ReplyAction="http://tempuri.org/IService/ObtenerImagenAppResponse")]
        byte[] ObtenerImagenApp(string Correo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/ObtenerImagenApp", ReplyAction="http://tempuri.org/IService/ObtenerImagenAppResponse")]
        System.Threading.Tasks.Task<byte[]> ObtenerImagenAppAsync(string Correo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/ObtenerAppsSuscripcion", ReplyAction="http://tempuri.org/IService/ObtenerAppsSuscripcionResponse")]
        string[][] ObtenerAppsSuscripcion();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/ObtenerAppsSuscripcion", ReplyAction="http://tempuri.org/IService/ObtenerAppsSuscripcionResponse")]
        System.Threading.Tasks.Task<string[][]> ObtenerAppsSuscripcionAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/ObtenerAppsRecientes", ReplyAction="http://tempuri.org/IService/ObtenerAppsRecientesResponse")]
        string[][] ObtenerAppsRecientes();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/ObtenerAppsRecientes", ReplyAction="http://tempuri.org/IService/ObtenerAppsRecientesResponse")]
        System.Threading.Tasks.Task<string[][]> ObtenerAppsRecientesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/ObtenerAppsComprados", ReplyAction="http://tempuri.org/IService/ObtenerAppsCompradosResponse")]
        string[][] ObtenerAppsComprados(string Correo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/ObtenerAppsComprados", ReplyAction="http://tempuri.org/IService/ObtenerAppsCompradosResponse")]
        System.Threading.Tasks.Task<string[][]> ObtenerAppsCompradosAsync(string Correo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/ObtenerAppInfo", ReplyAction="http://tempuri.org/IService/ObtenerAppInfoResponse")]
        string[] ObtenerAppInfo(int IdApp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/ObtenerAppInfo", ReplyAction="http://tempuri.org/IService/ObtenerAppInfoResponse")]
        System.Threading.Tasks.Task<string[]> ObtenerAppInfoAsync(int IdApp);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceChannel : Buiseness_Logic.LaunchServices.IService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceClient : System.ServiceModel.ClientBase<Buiseness_Logic.LaunchServices.IService>, Buiseness_Logic.LaunchServices.IService {
        
        public ServiceClient() {
        }
        
        public ServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool AgregarCustomer(string Nombre, string Apellido, string Correo, string Contrasegna) {
            return base.Channel.AgregarCustomer(Nombre, Apellido, Correo, Contrasegna);
        }
        
        public System.Threading.Tasks.Task<bool> AgregarCustomerAsync(string Nombre, string Apellido, string Correo, string Contrasegna) {
            return base.Channel.AgregarCustomerAsync(Nombre, Apellido, Correo, Contrasegna);
        }
        
        public bool[] Login(string Correo, string Contrasegna) {
            return base.Channel.Login(Correo, Contrasegna);
        }
        
        public System.Threading.Tasks.Task<bool[]> LoginAsync(string Correo, string Contrasegna) {
            return base.Channel.LoginAsync(Correo, Contrasegna);
        }
        
        public string[] ClienteActivo(string Correo) {
            return base.Channel.ClienteActivo(Correo);
        }
        
        public System.Threading.Tasks.Task<string[]> ClienteActivoAsync(string Correo) {
            return base.Channel.ClienteActivoAsync(Correo);
        }
        
        public bool ActualizarCustomer(string Nombre, string Apellido, string Correo, string Contrasegna) {
            return base.Channel.ActualizarCustomer(Nombre, Apellido, Correo, Contrasegna);
        }
        
        public System.Threading.Tasks.Task<bool> ActualizarCustomerAsync(string Nombre, string Apellido, string Correo, string Contrasegna) {
            return base.Channel.ActualizarCustomerAsync(Nombre, Apellido, Correo, Contrasegna);
        }
        
        public bool AgregarMembership(string Correo) {
            return base.Channel.AgregarMembership(Correo);
        }
        
        public System.Threading.Tasks.Task<bool> AgregarMembershipAsync(string Correo) {
            return base.Channel.AgregarMembershipAsync(Correo);
        }
        
        public bool AgregarAppPurchased(string NombreApp, string Correo) {
            return base.Channel.AgregarAppPurchased(NombreApp, Correo);
        }
        
        public System.Threading.Tasks.Task<bool> AgregarAppPurchasedAsync(string NombreApp, string Correo) {
            return base.Channel.AgregarAppPurchasedAsync(NombreApp, Correo);
        }
        
        public bool AgregarDeveloper(string Nombre, string Apellido, string Correo, string Contrasegna) {
            return base.Channel.AgregarDeveloper(Nombre, Apellido, Correo, Contrasegna);
        }
        
        public System.Threading.Tasks.Task<bool> AgregarDeveloperAsync(string Nombre, string Apellido, string Correo, string Contrasegna) {
            return base.Channel.AgregarDeveloperAsync(Nombre, Apellido, Correo, Contrasegna);
        }
        
        public bool ActualizarDeveloper(string Nombre, string Apellido, string Correo, string Contrasegna) {
            return base.Channel.ActualizarDeveloper(Nombre, Apellido, Correo, Contrasegna);
        }
        
        public System.Threading.Tasks.Task<bool> ActualizarDeveloperAsync(string Nombre, string Apellido, string Correo, string Contrasegna) {
            return base.Channel.ActualizarDeveloperAsync(Nombre, Apellido, Correo, Contrasegna);
        }
        
        public string[] DesarrolladorActivo(string Correo) {
            return base.Channel.DesarrolladorActivo(Correo);
        }
        
        public System.Threading.Tasks.Task<string[]> DesarrolladorActivoAsync(string Correo) {
            return base.Channel.DesarrolladorActivoAsync(Correo);
        }
        
        public bool AgregarApp(string CorreoDesarrollador, string Nombre, string Descripcion, string Categoria, byte[] Imagen) {
            return base.Channel.AgregarApp(CorreoDesarrollador, Nombre, Descripcion, Categoria, Imagen);
        }
        
        public System.Threading.Tasks.Task<bool> AgregarAppAsync(string CorreoDesarrollador, string Nombre, string Descripcion, string Categoria, byte[] Imagen) {
            return base.Channel.AgregarAppAsync(CorreoDesarrollador, Nombre, Descripcion, Categoria, Imagen);
        }
        
        public string[][] ObtenerAppsDeveloper(string Correo) {
            return base.Channel.ObtenerAppsDeveloper(Correo);
        }
        
        public System.Threading.Tasks.Task<string[][]> ObtenerAppsDeveloperAsync(string Correo) {
            return base.Channel.ObtenerAppsDeveloperAsync(Correo);
        }
        
        public byte[] ObtenerImagenApp(string Correo) {
            return base.Channel.ObtenerImagenApp(Correo);
        }
        
        public System.Threading.Tasks.Task<byte[]> ObtenerImagenAppAsync(string Correo) {
            return base.Channel.ObtenerImagenAppAsync(Correo);
        }
        
        public string[][] ObtenerAppsSuscripcion() {
            return base.Channel.ObtenerAppsSuscripcion();
        }
        
        public System.Threading.Tasks.Task<string[][]> ObtenerAppsSuscripcionAsync() {
            return base.Channel.ObtenerAppsSuscripcionAsync();
        }
        
        public string[][] ObtenerAppsRecientes() {
            return base.Channel.ObtenerAppsRecientes();
        }
        
        public System.Threading.Tasks.Task<string[][]> ObtenerAppsRecientesAsync() {
            return base.Channel.ObtenerAppsRecientesAsync();
        }
        
        public string[][] ObtenerAppsComprados(string Correo) {
            return base.Channel.ObtenerAppsComprados(Correo);
        }
        
        public System.Threading.Tasks.Task<string[][]> ObtenerAppsCompradosAsync(string Correo) {
            return base.Channel.ObtenerAppsCompradosAsync(Correo);
        }
        
        public string[] ObtenerAppInfo(int IdApp) {
            return base.Channel.ObtenerAppInfo(IdApp);
        }
        
        public System.Threading.Tasks.Task<string[]> ObtenerAppInfoAsync(int IdApp) {
            return base.Channel.ObtenerAppInfoAsync(IdApp);
        }
    }
}
